* Basic Graph Example
#+name: node-table
| *node* | *label* | *shape* | *fillcolor* |
|--------+---------+---------+-------------|
| start  | start   | ellipse |             |
| middle | middle  |         | blue        |
| end    | end     | ellipse |             |

#+name: graph-table
| from   | to     | label |
|--------+--------+-------|
| start  | middle |       |
| middle | end    |       |


* Genome Pipeline
#+name: genome-node-table
| *node*            | *label*                              | *shape* | *fillcolor* |
|-------------------+--------------------------------------+---------+-------------|
| start             | start                                | ellipse |             |
| init_prior        | Schedule For Release (Overbook)      |         | red         |
| get_data          | Get Data                             |         |             |
| validate_data     | Validate                             |         |             |
| pass              | Passes Validation?                   | diamond | yellow      |
| ebi               | EBI Workflow                         |         |             |
| prioritize        | Prioritize                           |         |             |
| is_high           | Is Critical Priority?                | diamond | yellow      |
| will_provider_fix | Provider Fix?                        | diamond | yellow      |
| manual_work       | Process Ourselves For Next Release   |         | red         |
| manual_work_later | Process Ourselves For Future Release |         | red         |
| reflow            | ReFlow Workflow                      |         |             |
| end               | end                                  | ellipse |             |

#+name: genome-graph-table
| from              | to                | label |
|-------------------+-------------------+-------|
| start             | init_prior        |       |
| init_prior        | get_data          |       |
| get_data          | validate_data     |       |
| validate_data     | pass              |       |
| pass              | ebi               | Y     |
| pass              | prioritize        | N     |
| prioritize        | is_high           |       |
| is_high           | will_provider_fix | N     |
| is_high           | manual_work       | Y     |
| will_provider_fix | init_prior        | Y     |
| will_provider_fix | manual_work_later | N     |
| manual_work       | validate_data     |       |
| manual_work_later | validate_data     |       |
| ebi               | reflow            |       |
| reflow            | end               |       |


* Code
#+name: graph-from-tables
#+HEADER: :var nodes=genome-node-table graph=genome-graph-table
#+BEGIN_SRC emacs-lisp :colnames yes :exports results
     (concat
          "//rankdir=LR;\n" ;; remove comment characters '//' for horizontal layout; add for vertical layout
          (mapconcat
           (lambda (x)
             (format "%s [label=\"%s\" shape=%s style=\"filled\" fillcolor=\"%s\"]"
                             (car x)
                             (nth 1 x)
                             (if (string= "" (nth 2 x)) "box" (nth 2 x))
                             (if (string= "" (nth 3 x)) "none" (nth 3 x))
                             )) nodes "\n")
          "\n"
          (mapconcat
           (lambda (x)
             (format "%s -> %s [taillabel=\"%s\"]"
                             (car x) (nth 1 x) (nth 2 x))) graph "\n")
          )
#+END_SRC

#+HEADER: :var input=graph-from-tables :file ~/genomePipeline.png
#+BEGIN_SRC dot :exports results
digraph {
 $input
}
#+END_SRC





