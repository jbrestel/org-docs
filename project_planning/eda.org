#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+TITLE:     EDA Backend
#+AUTHOR:    John Brestelli
#+DESCRIPTION: EDA Backend
#+OPTIONS:   H:5 num:nil toc:2 p:t tags:not-in-toc
* Basics
** Vocabulary
- Study :: An investigation and analysis of subjects
- Entity :: Something with distinct and independent existence
- Entity Type Graph :: Entity Type descriptions includding parent/child (study specific)
- Attribute :: Variable/Property/Characteristics
- Attribute Graph :: Web display ontology descriptions including parent/child relationships (study specific)
- Process :: Application of a Protocol
- MegaStudy :: Union (or Intersection?) of Entities from 2 or more sub studies and the union (or intersection?) of their attribute values
** Out of scope
- Dependencies
  - Preprocessing
  - ISA Reader (CBIL::ISA)
- Query Performance
- Data Vis and UX
** Useful Links

[[https://feature.clinepidb.org/ce.feature/app/eda][ClinEpi Feature Site]]

[[https://docs.google.com/document/d/1d9m6en4MagA9h0KIOI0_6Ekq7MVaq_-s5puNFm-oJBI/edit?pli=1#heading=h.olqv0wxx11uz][EDA Workspace Working Group]]

* Schema / Tables                                                                                          :JohnI:JohnB:
#+begin_src plantuml :file images/eda_uml.png :exports results
  !define plugin4table(x) class x << (T,#FFAAAA) >> #orange;line:blue;
  !define plugin3table(x) class x << (T,#FFAAAA) >> #palegreen;line:blue;
  !define plugin2table(x) class x << (T,#FFAAAA) >> #lightblue;line:blue;
  !define plugin1table(x) class x << (T,#FFAAAA) >> #line:blue;
  !define primary_key(x) p <U+0020>* <u>x</u>
  !define foreign_key(x) fk * x
  !define foreign_key_nullable(x) fk <U+0020><U+0020> x
  !define unique(x) u <U+0020>* x
  !define unique_nullable(x) u <U+0020><U+0020> x
  !define field_nullable(x) <U+0020> <U+0020> <U+0020> x
  !define field(x) <U+0020> <U+0020> * x
  hide methods
  hide stereotypes

rectangle InsertEntityGraph.pm {
  plugin1table(STUDY) {
    primary_key(STUDY_ID)
    unique(STABLE_ID)
    foreign_key(EXTERNAL_DATABASE_RELEASE_ID)
    field_nullable(INTERNAL_ABBREV)
    field_nullable(MAX_ATTR_LENGTH)
  }

        plugin1table(ENTITYTYPE) {
    primary_key(ENTITY_TYPE_ID)
    field(NAME)
    field_nullable(TYPE_ID)
    field_nullable(ISA_TYPE)
    foreign_key(STUDY_ID)
    field(INTERNAL_ABBREV)
  }

  plugin1table(ENTITYCLASSIFICATION) {
    primary_key(ENTITY_CLASSIFICATION_ID)
    foreign_key(ENTITY_ATTRIBUTES_ID)
    foreign_key(ENTITY_TYPE_ID)
  }

  plugin1table(ENTITYATTRIBUTES) {
    primary_key(ENTITY_ATTRIBUTES_ID)
    field(STABLE_ID)
    foreign_key(ENTITY_TYPE_ID)
    field_nullable(ATTS)
  }

  plugin1table(ATTRIBUTEUNIT) {
    primary_key(ATTRIBUTE_UNIT_ID)
    foreign_key(ENTITY_TYPE_ID)
    foreign_key(ATTR_ONTOLOGY_TERM_ID)
    foreign_key(UNIT_ONTOLOGY_TERM_ID)
  }

  plugin1table(PROCESSATTRIBUTES) {
    primary_key(PROCESS_ATTRIBUTES_ID)
    foreign_key(PROCESS_TYPE_ID)
    foreign_key(IN_ENTITY_ID)
    foreign_key(OUT_ENTITY_ID)
    field_nullable(ATTS)
  }

  plugin1table(PROCESSTYPECOMPONENT) {
    primary_key(PROCESS_TYPE_COMPONENT_ID)
    foreign_key(PROCESS_TYPE_ID)
    foreign_key(COMPONENT_ID)
    field(ORDER_NUM)
  }

  plugin1table(PROCESSTYPE) {
    primary_key(PROCESS_TYPE_ID)
    field(NAME)
    field_nullable(DESCRIPTION)
    foreign_key(TYPE_ID)
  }


}

rectangle LoadEntityTypeAndAttributeGraph.pm {
    plugin3table(ATTRIBUTEGRAPH) {
    primary_key(ATTRIBUTE_GRAPH_ID)
    foreign_key(STUDY_ID)
    foreign_key(ONTOLOGY_TERM_ID)
    field(STABLE_ID)
    field(PARENT_STABLE_ID)
    foreign_key(PARENT_ONTOLOGY_TERM_ID)
    field_nullable(PROVIDER_LABEL)
    field(DISPLAY_NAME)
    field_nullable(DISPLAY_ORDER)
    field_nullable(DEFINITION)
    field_nullable(DISPLAY_TYPE)
    field_nullable(DISPLAY_RANGE_MIN)
    field_nullable(DISPLAY_RANGE_MAX)
    field_nullable(IS_MERGE_KEY)
    field_nullable(IS_REPEATED)
    field_nullable(BIN_WIDTH_OVERRIDE)
    field_nullable(IS_TEMPORAL)
    field_nullable(IS_FEATURED)
    field_nullable(ORDINAL_VALUES)
  }

  plugin3table(ENTITYTYPEGRAPH) {
    primary_key(ENTITY_TYPE_GRAPH_ID)
    foreign_key(STUDY_ID)
    field_nullable(STUDY_STABLE_ID)
    field_nullable(PARENT_STABLE_ID)
    foreign_key_NULLABLE(PARENT_ID)
    field_nullable(STABLE_ID)
    foreign_key(ENTITY_TYPE_ID)
    field(DISPLAY_NAME)
    field_nullable(DISPLAY_NAME_PLURAL)
    field_nullable(DESCRIPTION)
    field(INTERNAL_ABBREV)
  }
}


rectangle LoadAttributesFromEntityGraph {
  plugin2table(ATTRIBUTEVALUE) {
    primary_key(ATTRIBUTE_VALUE_ID)
    foreign_key(ENTITY_ATTRIBUTES_ID)
    foreign_key(ENTITY_TYPE_ONTOLOGY_TERM_ID)
    foreign_key_nullable(PROCESS_TYPE_ONTOLOGY_TERM_ID)
    foreign_key(UNIT_ONTOLOGY_TERM_ID)
    field(ATTRIBUTE_STABLE_ID)
    field_nullable(STRING_VALUE)
    field_nullable(NUMBER_VALUE)
    field_nullable(DATE_VALUE)
  }


  plugin2table(ATTRIBUTE) {
    primary_key(ATTRIBUTE_ID)
    foreign_key(ENTITY_TYPE_ID)
    foreign_key(PROCESS_TYPE_ID)
    field_nullable(ENTITY_TYPE_STABLE_ID)
    foreign_key_NULLABLE(ONTOLOGY_TERM_ID)
    foreign_key(PARENT_ONTOLOGY_TERM_ID)
    field(STABLE_ID)
    field(DISPLAY_NAME)
    field(DATA_TYPE)
    field_nullable(DISTINCT_VALUES_COUNT)
    field_nullable(IS_MULTI_VALUED)
    field_nullable(DATA_SHAPE)
    field_nullable(UNIT)
    foreign_key_nullable(UNIT_ONTOLOGY_TERM_ID)
    field_nullable(PRECISION)
    field_nullable(ORDERED_VALUES)
    field_nullable(RANGE_MIN)
    field_nullable(RANGE_MAX)
    field_nullable(BIN_WIDTH)
  }

}
  plugin4table(ONTOLOGYTERM) {
    primary_key(ONTOLOGY_TERM_ID)
    field(source_id)
  }

  STUDY <..|{ ENTITYTYPE
  ENTITYTYPE <..|{ ENTITYCLASSIFICATION
  ENTITYATTRIBUTES <.d.|{ ENTITYCLASSIFICATION
  ENTITYTYPE <..|{ ENTITYATTRIBUTES
  ENTITYTYPE <..|{ ATTRIBUTEUNIT
  ENTITYATTRIBUTES <..|{ PROCESSATTRIBUTES
  ENTITYATTRIBUTES <..|{ PROCESSATTRIBUTES
  PROCESSTYPE <.d.|{ PROCESSATTRIBUTES
  PROCESSTYPE <..|{ PROCESSTYPECOMPONENT
  PROCESSTYPE <..|{ PROCESSTYPECOMPONENT
  ONTOLOGYTERM <.d.|{ ENTITYTYPE
  ONTOLOGYTERM <..|{ PROCESSTYPE
  ONTOLOGYTERM <..|{ ATTRIBUTEUNIT
  ONTOLOGYTERM <..|{ ATTRIBUTEUNIT
  ENTITYTYPE <..|{ ATTRIBUTE
  PROCESSTYPE <..|{ ATTRIBUTE
  ONTOLOGYTERM <..|{ ATTRIBUTE
  ONTOLOGYTERM <..|{ ATTRIBUTE
  ONTOLOGYTERM <..|{ ATTRIBUTE
  ENTITYATTRIBUTES <..|{ ATTRIBUTEVALUE
  ONTOLOGYTERM <..|{ ATTRIBUTEVALUE
  ONTOLOGYTERM <..|{ ATTRIBUTEVALUE
  ONTOLOGYTERM <..|{ ATTRIBUTEVALUE
  STUDY <.r.|{ ENTITYTYPEGRAPH
  ENTITYTYPE <.r.|{ ENTITYTYPEGRAPH
  STUDY <..|{ ATTRIBUTEGRAPH
  ONTOLOGYTERM <.d.|{ ATTRIBUTEGRAPH
  ONTOLOGYTERM <.d.|{ ATTRIBUTEGRAPH
  #+end_src

  #+RESULTS:
  [[file:images/eda_uml.png]]

- [X] update schema installer to create EDA and EDA_UD schemas (replace ApiDB)
* Plugins                                                                                           :JohnB:WojtekB:JayH:
** InsertEntityGraph
- [-] read the ISA(Tab or Simple) files and populate normalized tables representing the EntityGraph
  - [X] EDA::Study
  - [X] EDA::EntityType :: Household,Partipant, Sample ...
  - [X] EDA::ProcessType :: Name of a process/protocol that connects entities
  - [X] EDA::EntityAttributes :: stable id for the entity + json clob of variables and values
  - [X] EDA::ProcessAttributes :: protocol/edge + json clob of variables and values 
  - [X] EDA::AttributeUnit
  - [ ] EDA::AttributeScale :: log,ln, linear
  - [X] EDA::ProcessTypeComponent :: used to encode a series of protocols
- [X] Add GeoHash attributes if we have Lat/Long
- [X] argument for schema (eda vs eda_ud)
** LoadAttributesFromEntityGraph
- [X] Read the Values from the EntityGraph Tables and makes a big tall table (key/values).
  - [X] EDA::Attribute :: Calculate stats at this point for each variable/dataset/entityType;  THe Attribute table is for the LEAF nodes in our "AttributeGraph";
  - [X] EDA::AttributeValue :: Tall table with a row for each value for each variable/entity
- [X] Require the owl file at this point as a sanity check
- [X] Handle Units from Annotation Properties
- [ ] Handle Scale from Annotation Properties
- [ ] Check that binary inference has priority over ordinal
- [X] argument for schema (edv vs eda_ud)
** LoadEntityTypeAndAttributeGraphs
- [X] Populate tables for parent-child relationships (EntityTypes and Attributes); AttributeGraph also stores annotation properties from the owl file
  - [X] EDA::AttributeGraph :: Connect Attribute (Leaf) to parent/child relationships defined by ontology.  also stores annotation properties from the owl file
  - [X] EDA::EntityTypeGraph :: Infer entity type relationships from the Inputs/Outputs
- [X] argument for schema (edv vs eda_ud)
** LoadDatasetSpecificEntityGraph
- [X] Populate Dataset Specific Tables
  - [X] EDA::AttributeValue_${studyId}_${EntityTypeId} :: Subset of the main AttributeValue Table (per dataset)
  - [X] EDA::Ancestors_${studyId}_${EntityTypeId} :: Fields for stable ids for each ancestor
  - [X] EDA::AttributeGraph_${studyId}_${EntityTypeId} :: Join Attribute Table  (LEAF) with AttributeGraph;
  - [X] EDA::EntityAttributes_${studyId}_${EntityTypeId} :: Wide table with Typed Fields
    #+begin_src sql
          select stable_id, data_type, is_multi_valued  from APIDB.ATTRIBUTEGRAPH_GEMSCC0003_1_HOUSEHOLD where has_values = 1;

          select entity_attributes_id
               , json_value(atts, '$.EUPATH_0000127[0]' RETURNING VARCHAR2) string
               , json_value(atts, '$.EUPATH_0000047[0]' RETURNING NUMBER) num
               , json_value(atts, '$.EUPATH_0033147[0]' RETURNING DATE) date
               , json_query(atts, '$.EUPATH_0033147') multi
          from apidb.entityattributes 
          where entity_attributes_id = 10632037;
    #+end_src
- [X] argument for schema (eda vs eda_ud)
** Mega Study Plugins                                                                                           :JohnB:
**** InsertMegaEntityGraph

- [X] add new row in study
- [X] yaml which defines megastudy
  - [X] Union of all Studies for Project or by list of studies
- [X] new entitytype for "study"
  - [X] one new row in entityattributes for each "substudy"
- [-] Study Characteristics in the entity graph
  - [X] query from substudy StudyCharacteristics table and load as EntityAttributes
  - [ ] display name needs to be added to the yaml for study characteristics 
- [X] load new entitytypes for "union" of sub study entity types
- [-] Units
  - [X] first pass assume units are consistent
  - [ ] long run choose "base unit"
- [X] link sub study entityattributes to mega study entity types
    
**** LoadMegaDatasetSpecificEntityGraph
- [X] alternative mechanism to get the list of "entity_type_ids" used to find other tables
  - [X] changes to the parent class LoadDatasetSpecificEntityGraph to enable this

* Ontologies and Annotation Properties                                                                            :JayH:
** Annotation Properties                                                                                         :JayH:
- [X] Unit Ontology Terms are required to be loaded into SRes.OntologyTerm before study is loaded
- [X] Which fields from annotation properties are required by EDA?  implcations for Genomics/Mbio/MapVEu
** OWL File Organization
- [X] consider dataset specific webdisplay ontologies
- [ ] can we use the owl file in place of the ontologymapping.xml?
* Reflow Workflow                                                                                                 :JayH:
** Phase1 / ClinEpi
- [X] finalize ReFlow Workflow
  - [X] create download files;  use "is_merge_key"
  - [X] Unit Ontology Terms are required to be loaded into SRes.OntologyTerm before study
  - [X] EDA.StudyCharacteristics
    - [X] add create table sql file "ApiCommonData/Load/lib/sql/apidbSchema/" and in the installApiDB script (ApiCommonData/Load/bin)
    - [X] study_id field in new table should point to eda.study
    - [X] update inc instances to create the EDA.StudyCharacteristic table (JohnI can help with this)
    - [X] update plugin InsertStudyCharacteristics to use "EDA.StudyCharacteristics"
  - Add "schema" arg for InsertStudyCharacteristics so we can load into EDA schema
    - Needed for EDA_UD vs EDA schema
    - [X] ensure we are loading into eda and not apidb.
    - [X] the workflow step which calls the plugin needs to set the "schema" to "EDA"
    - [X] undoTables needs to lookup the value of "schema" from when the plugin was run forward and undo those tables.      
** ClinEpi Graphviz
*** Input Tables
#+name: node-table
#+begin_table
| *node*                         | *label*                                      | *shape* | *fillcolor* |
|--------------------------------+----------------------------------------------+---------+-------------|
| global_start                   | start                                        | ellipse |             |
| global_end                     | end                                          | ellipse |             |
| start                          | dataset start                                | octagon | plum        |
| end                            | dataset end                                  | octagon | plum        |
| collections                    | Collections (yaml config)                    |         | lightgreen  |
| webdisplay_ontology            | Webdisplay Ontology                          |         | lightgreen  |
| study_classifications          | Study Characteristics                        |         | lightgreen  |
| annotation_properties          | Annotation Properties                        |         | lightgreen  |
| entity_types                   | Entity Types                                 |         | lightgreen  |
| insert_entity_graph            | Entity Graph                                 |         | plum        |
| mega_insert_entity_graph       | MEGA Entity Graph                            |         | orange      |
| load_attributes                | Attributes and Values                        |         |             |
| load_graphs                    | EntityType And Attribute Graphs              |         |             |
| load_dataset_specific          | Dataset Specific Tables                      |         | plum        |
| mega_load_dataset_specific     | MEGA Dataset Specific Tables                 |         | orange      |
| download                       | Download Files                               |         | plum        |
| validate_download              | Validate Download                            |         | plum        |
| validate_tables                | Validate Tables                              |         | plum        |
| validate_annotation_properties | Validate Annotation Properties               |         | lightgreen  |
| collection_attributes          | Collection (Inferred Parent/Child Relations) |         | lightgreen  |
| is_mega_dataset                | Is MEGA Study                                | diamond | yellow      |
| is_mega_dataset_2              | Is MEGA Study                                | diamond | yellow      |
| mega_dataset                   | MEGA dataset                                 | octagon | orange      |
#+end_table

#+name: graph-table
#+begin_table
| from                           | to                             | label |
|--------------------------------+--------------------------------+-------|
| global_start                   | start                          |       |
| start                          | webdisplay_ontology            |       |
| global_start                   | collections                    |       |
| webdisplay_ontology            | study_classifications          |       |
| webdisplay_ontology            | validate_annotation_properties |       |
| study_classifications          | is_mega_dataset                |       |
| entity_types                   | is_mega_dataset                |       |
| is_mega_dataset                | insert_entity_graph            | N     |
| is_mega_dataset                | mega_insert_entity_graph       | Y     |
| webdisplay_ontology            | entity_types                   |       |
| insert_entity_graph            | load_attributes                |       |
| mega_insert_entity_graph       | load_attributes                |       |
| load_attributes                | load_graphs                    |       |
| load_graphs                    | is_mega_dataset_2              |       |
| is_mega_dataset_2              | load_dataset_specific          | N     |
| is_mega_dataset_2              | mega_load_dataset_specific     | Y     |
| load_dataset_specific          | download                       |       |
| load_dataset_specific          | validate_tables                |       |
| validate_download              | end                            |       |
| download                       | validate_download              |       |
| validate_tables                | end                            |       |
| validate_annotation_properties | annotation_properties          |       |
| annotation_properties          | load_graphs                    |       |
| collections                    | collection_attributes          |       |
| end                            | mega_dataset                   |       |
| mega_dataset                   | collection_attributes          |       |
| collection_attributes          | global_end                     |       |
#+end_table

*** TODO graph-from-tables

#+name: graph-from-tables
#+HEADER: :var nodes=node-table graph=graph-table
#+BEGIN_SRC emacs-lisp :colnames yes :exports none
     (concat
          "//rankdir=LR;\n" ;; remove comment characters '//' for horizontal layout; add for vertical layout
          (mapconcat
           (lambda (x)
             (format "%s [label=\"%s\" shape=%s style=\"filled\" fillcolor=\"%s\"]"
                             (car x)
                             (nth 1 x)
                             (if (string= "" (nth 2 x)) "box" (nth 2 x))
                             (if (string= "" (nth 3 x)) "none" (nth 3 x))
                             )) nodes "\n")
          "\n"
          (mapconcat
           (lambda (x)
             (format "%s -> %s [taillabel=\"%s\"]"
                             (car x) (nth 1 x) (nth 2 x))) graph "\n")
          )
#+END_SRC

#+HEADER: :var input=graph-from-tables :file images/reflowMadness.png
#+BEGIN_SRC dot :exports results
digraph {
 $input
}
#+END_SRC

#+RESULTS:
[[file:images/reflowMadness.png]]
** Other Components
- [ ] MBio and MapVEU Need a dedicated workflow Template
- [ ] Where are we loading application specific data? (datasets, SNPs, WHO Standards, ...)
- Which studies would be made into Mega Studies
  - Current use cases are all studies for Mbio and all studies for MapVEu

* Loading Progress
** DONE Phase1 Production Loading                                                                                :JayH:
- [X] work with outreach to preprocess studies targeted for beta release
- [X] reload data as requested into rm41910 until passes manual qa
- [X] Load into "EDA" schema instead of ApiDB
- [X] use finalized workflow to load datasets into clean/rbld instance as they pass manual qa

** IN PROGRESS MapVEu                                                                                      :BobM:JohnB:
- [X] Upgrade CBIL Reader to Load studies from ISA dumps
- [X] Mixed units within studies.. NO!
- [X] Genotype / Phenotype Assays
- [ ] Add variables for protocols to InsertEntityGraph.pm
- [ ] Species reconciliation


** IN PROGRESS Cross Study Comparison / Mega Study
*** YAML file to define Mega Study

We are using YAML format for StudyClassifications, MegaStudy and Collections

**** TODO Exclude studies list

#+begin_src yaml
---
stable_id: MegaStudyTest1
studies:
  - 2019-Lehman-abundance
  - 2020-francis-aegypti
---
stable_id: MegaStudyTest2
project: MapVEu

#+end_src

*** Reuse rows in $schema.entityattributes (node)
- [X] New Linking Table "EntityClassification"
  - [X] Linking Table which joins EntityAttributes to EntityType
  - [X] retain entity_type_id from entityattributes (original study)
- [X] update all appropriate queries which use "entityattributes to also join to entityclassification
- can join on entity_type_id for non mega studies if performance problem

*** InsertMegaEntityGraph.pm
- [X] Insert Study EntityType and  EntityAttribute rows for Mega Study
- [X] load study characteristics as attributes of new study node
  - [X] Read from StudyCharacteristics table
- [X] join new study rows in entityattributes to existing graph (ie. add row in eda.processattributes)
- [ ] do we need to specify which entity type to attach study?  currently attaching to every root node
  - could intersect entity type and union attribute graph??

#+begin_src plantuml :file images/mega_entity_types_uml.png
rectangle MegaStudy {
        object Study
        rectangle OriginalStudy {
                object Household
                object Participant
                object RepeatedMeasure
        }
}
Household --|> Participant
Participant --|> RepeatedMeasure
Study ..|> Household
#+end_src

#+RESULTS:
[[file:images/mega_entity_types_uml.png]]

*** Units

We enforce that all values for attribute/entitytype/study have the same unit!

**** TODO MapVeu will have unit issues

**** Reuse LoadAttributesFromEntityGraph.pm
This plugin does work to summarize the attributes.  I don't want to duplicate this code
- [X] continue to enforce that units are consistent for each entitytype/attribute
- [X] for now just fail if substudies are inconsistent for unit
- [ ] long term, Convert to Base Unit if init unit doesn't match mega unit
- [ ] add to the "loadAttributes" sql to return json object of sourcid/units
- [ ] For Mega Study, Print to fifo only when convertunits OR study nodes

**** Reuse $schema.AttributeValue Rows
- [X] add unit_ontology_term_id to each row
- [X] replace entity_type_id with ontology_term_id for the entitytype
- [X] use ontology_term_id of the entity type + ontology_term_id of the unit to join

*** Load Dataset Specific Tables
- [X] make subclass  / factor some methods because of harder joins for mega study
- [X] iterate over (sub)studies and do inserts

*** Command Lines
#+begin_example
 # load entity graph (no changes)
 ga ApiCommonData::Load::Plugin::InsertEntityGraph --metaDataRoot /home/jbrestel/tmp/popbio-migration/popbio-isatabs-for-JB-v2-uniform-sample-type/isatab-VBP0000123 --investigationBaseName i_investigation.txt --extDbRlsSpec 'VBP0000123|dontcare' --schema jbrestel --commit
 ga ApiCommonData::Load::Plugin::InsertEntityGraph --metaDataRoot /home/jbrestel/tmp/popbio-migration/popbio-isatabs-for-JB-v2-uniform-sample-type/isatab-VBP0000619 --investigationBaseName i_investigation.txt --extDbRlsSpec 'VBP0000619|dontcare' --schema jbrestel --commit
 ga ApiCommonData::Load::Plugin::InsertEntityGraph --metaDataRoot /home/jbrestel/tmp/popbio-migration/popbio-isatabs-for-JB-v2-uniform-sample-type/isatab-VBP0000642 --investigationBaseName i_investigation.txt --extDbRlsSpec 'VBP0000642|dontcare' --schema jbrestel --commit
 ga ApiCommonData::Load::Plugin::InsertEntityGraph --metaDataRoot /home/jbrestel/tmp/popbio-migration/popbio-isatabs-for-JB-v2-uniform-sample-type/isatab-VBP0000206 --investigationBaseName i_investigation.txt --extDbRlsSpec 'VBP0000206|dontcare' --schema jbrestel --commit


ga ApiCommonData::Load::Plugin::LoadAttributesFromEntityGraph --extDbRlsSpec 'VBP0000206|dontcare' --schema jbrestel --ontologyExtDbRlsSpec 'test_ontology|dontcare' --logDir /home/jbrestel/tmp/popbio-migration/logdir --commit 
ga ApiCommonData::Load::Plugin::LoadAttributesFromEntityGraph --extDbRlsSpec 'VBP0000123|dontcare' --schema jbrestel --ontologyExtDbRlsSpec 'test_ontology|dontcare' --logDir /home/jbrestel/tmp/popbio-migration/logdir --commit 
ga ApiCommonData::Load::Plugin::LoadAttributesFromEntityGraph --extDbRlsSpec 'VBP0000619|dontcare' --schema jbrestel --ontologyExtDbRlsSpec 'test_ontology|dontcare' --logDir /home/jbrestel/tmp/popbio-migration/logdir --commit 
ga ApiCommonData::Load::Plugin::LoadAttributesFromEntityGraph --extDbRlsSpec 'VBP0000642|dontcare' --schema jbrestel --ontologyExtDbRlsSpec 'test_ontology|dontcare' --logDir /home/jbrestel/tmp/popbio-migration/logdir --commit

ga ApiCommonData::Load::Plugin::LoadEntityTypeAndAttributeGraphs --logDir /home/jbrestel/tmp/popbio-migration/etag_log --extDbRlsSpec 'VBP0000123|dontcare' --schema jbrestel --ontologyExtDbRlsSpec 'test_ontology|dontcare' --commit
ga ApiCommonData::Load::Plugin::LoadEntityTypeAndAttributeGraphs --logDir /home/jbrestel/tmp/popbio-migration/etag_log --extDbRlsSpec 'VBP0000206|dontcare' --schema jbrestel --ontologyExtDbRlsSpec 'test_ontology|dontcare' --commit
ga ApiCommonData::Load::Plugin::LoadEntityTypeAndAttributeGraphs --logDir /home/jbrestel/tmp/popbio-migration/etag_log --extDbRlsSpec 'VBP0000619|dontcare' --schema jbrestel --ontologyExtDbRlsSpec 'test_ontology|dontcare' --commit
ga ApiCommonData::Load::Plugin::LoadEntityTypeAndAttributeGraphs --logDir /home/jbrestel/tmp/popbio-migration/etag_log --extDbRlsSpec 'VBP0000642|dontcare' --schema jbrestel --ontologyExtDbRlsSpec 'test_ontology|dontcare' --commit

 ga ApiCommonData::Load::Plugin::LoadDatasetSpecificEntityGraph  --extDbRlsSpec 'VBP0000123|dontcare' --schema jbrestel --commit
 ga ApiCommonData::Load::Plugin::LoadDatasetSpecificEntityGraph  --extDbRlsSpec 'VBP0000206|dontcare' --schema jbrestel --commit
 ga ApiCommonData::Load::Plugin::LoadDatasetSpecificEntityGraph  --extDbRlsSpec 'VBP0000619|dontcare' --schema jbrestel --commit
 ga ApiCommonData::Load::Plugin::LoadDatasetSpecificEntityGraph  --extDbRlsSpec 'VBP0000642|dontcare' --schema jbrestel --commit
#+end_example


** THEM DIY [[orgdocs:/project_planning/eda_diy.org]]                                                    :JayH:WojtekB:

** THEM MicrobiomeDB                                                                                          :WojtekB:
- [ ] performance issues with EC levels for functional shotgun data
- [X] Load studies into test instance
- [ ] Undo/Reload test data as required
- [X] metabolite ] Dan identified a small number of studies to load into rm41910
- [X] ISALoader Assay and other Mbio things
** THEM Collections                                                                                      :JayH:WojtekB:
- use the same file format for study classifications and collections.
- use a real file type which has a perl parser.
- allow multiple rows for the same key.
- allow parent/child relationships to be defined?  Could do this by duplicating the key
- variable/attributes are EITHER defined in ini file OR ALL leaf children are collected up
- YAML Seems to be a good way to go.  the whitespace issues are not too bad if the documents are made like the examples below

  See above [[graph-from-tables]] for how this fits into reflow workflow

*** How to handle Parent/Child?

Config file format
#+begin_example
 [collectionExample1]
  key1: value
  variables: someChild,somechild2,...

 [collectionExample2]
  key1: value
  variable: someChild
  variable : anotherChild

  #This is probably not allowed
 [collectionExample3]
  key1: value
  variables: [someChild,
             anotherChild] 
  #+end_example

  Better in YAML
#+begin_src yaml
---
name: document1
stable_id: value
variables:
  - someChild
  - anotherChild
---
name: document2
stable_id: otherValue
variables:
  - someChild
  - anotherChild
#+end_src

  
*** File Formats and Parsers
**** Option0: YAML::Tiny
My understaning is with YAML we would need to be very careful with whitespace.  the parser will not work if the indentation is incorrect.

I modified Steve's example for collections
#+begin_src yaml
---
name: Z Scores
id: EUPATH_000933
description: a great collection
rangeMin: 1
rangeMax: 20
variables:
  - EUPATH_0000871
  - EUPATH_009988
---
name: TAC Scores
id: EUPATH_000767
description: another collection
variables:
  - EUPATH_0003938
  - EUPATH_0076667  
#+end_src

#+begin_src perl
  use YAML::Tiny;
  my $yaml = YAML::Tiny->read( 'test.yaml' );
  foreach my $collection (@$yaml) }
    print Dumper $collection;
  }
#+end_src

Could do something similar with study classifications
#+begin_src yaml
---
dataset: ISASimple_Gates_ELICIT_rct_RSRC
Additional data:
Country: Tanzania
Disease:
Investigation type: Experimental
Population included: Neonate
Project name:
Sample type:
  - Blood
  - Stool
Sex:
  - Female
  - Male
Study design: Randomized controlled/clinical trial
WHO indicator subdomain:
  - Reproductive, maternal, newborn, child and adolescent health
  - Nutrition
Years:
  - 2017
  - 2018
---
dataset: ISASimple_Gates_GAMIN_rct_RSRC
Additional data:
Country: Burkina Faso
Disease:
Investigation type: Experimental
Population included:
  - Neonate
  - Infant
  - Child
Project name:
Sample type:
  - Blood
  - Stool
Sex:
  - Female
  - Male
Study design: Randomized controlled/clinical trial
WHO indicator subdomain: Reproductive, maternal, newborn, child and adolescent health
Years:
  - 2019
  - 2020
#+end_src

**** Option1: Config::General
this is Apache Config format. Handles multiple lines with same key (makes array).
#+begin_example
<study ISASimple_Gates_ELICIT_rct_RSRC>

Additional data:
Country: Tanzania
Disease:
Investigation type: Experimental
Population included: Neonate
Project name:
Sample type: Blood
Sample type: Stool
Sex: Female
Sex: Male
Study design: Randomized controlled/clinical trial
WHO indicator subdomain: Reproductive, maternal, newborn, child and adolescent health
WHO indicator subdomain: Nutrition
Years: 2017
Years: 2018
</study>
#+end_example
#+begin_src perl
  use Config::General;
  my $file = "some.config";
  my $ini = Config::General->new(-ConfigFile => $file,
                                 -SplitPolicy => "custom",
                                 -SplitDelimiter => '\s*:\s*'
      );
  my %iniHash = $ini->getall();
#+end_src

**** Option2: Config::Tiny
This is a very simple parser for ini files.  It does not allow multiple values.  User must put them on the same line and code would need to convert to array

#+begin_example
[ISASimple_Gates_ELICIT_rct_RSRC]
Additional data=
Country= Tanzania
Disease=
Investigation type= Experimental
Population included= Neonate
Project name=
Sample type= ["Blood","Stool"]
Sex= ["Female","Male"]
Study design= Randomized controlled/clinical trial
WHO indicator subdomain= ["Reproductive, maternal, newborn, child and adolescent health","Nutrition"]
Years= [2017,2018]
#+end_example

**** Option3: *CBIL::Util::Ini*
In house parser.  Can modify as needed. Same format as Option1 except will handle multiple values;  NOTE:  This uses "Parse::RecDescent" which requires the entire file to be read into memory (seems ok as these files will be small).

#+begin_src perl
  use CBIL::Util::Ini;
  my $iniFileParser = CBIL::Util::Ini->new();
  my $iniHash = $iniFileParser->parseFile($file);
#+end_src


*** Loader
**** Collection Tables
#+begin_src sql
  CREATE TABLE &1.Collection (
   collection_id NUMBER(10) NOT NULL,
   stable_id varchar2(50),
   description varchar2(4000),
   range_min number(10),
   range_max number(10),
  PRIMARY KEY (collection_id),
  CONSTRAINT unique_stable_id UNIQUE (stable_id));

  CREATE TABLE &1.CollectionAttribute (
   collection_attribute_id NUMBER(10) NOT NULL,
   collection_id number(10),
   attribute_stable_id varchar2(50),
  PRIMARY KEY (collection_attribute_id));
  #+end_src
**** Plugins                                                                                                   :JayH:
1. Load Collections from Ini File "InsertCollection"
   - Global step to load into Collections table and all "CollectionAttributes" which are defined in the ini file
2. Load Parent/Child Relationships (where these were not defined in ini) "InsertCollectionAttribute"
   - Get all leaf terms descended from collection stable_id and load them into CollectionAttribute Table


** BLOCKED Genomics
- [ ] DNASeq (SNPs and CNV)
- [ ] Host Pathogen
- [ ] Antibody Microarray (ICEMR)
- [ ] PopSet Isolate Sequences
- [ ] Single cell RNASeq ??
- [ ] Systems Biology  
* Data Validation                                                                                    :JohnB:StephW:JayH:
- [ ] validation of annotation properties (ad hoc or via owl file)
- [ ] add TBD qa/validation steps

** Reader Interface
#+BEGIN_EXAMPLE
 $entityType = $dataset->getEntityType($sourceId);
 @variables = $entityType->getVariables();
 $entityType->getEntityCount();
 $entityType->getStableIds();
 $entityType = $entity->getEntityType();
 $entity->getStableId();
 $entity->getValue(VariableSourceId, [string,number,date]);
 $attribute->getDisplayName(); # lots of other variable info
 $attribute->hasValues(); # lots of other variable info
 $attribute->isContinuous(); # lots of other variable info
 #+END_EXAMPLE
** Readers
- [ ] Raw Data (dataset specific);  Maybe not required?
- [ ] Download File
- [ ] Dataset Specific Database Queries
- [ ] Webservices
** Tests
- [ ] Tests can only use methods defined by the API
- [ ] The same tests will be run first on the FromProvider Files (to establish Truth) then run on the database ...
  + example:  "ok($participantEntityType->getEntityCount() == 5000)";
    + This example get the counts of participants and ensures that the number it gets is 5000;













