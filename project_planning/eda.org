#+STARTUP: indent
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-bigblow.setup
#+TITLE:     EDA Backend
#+AUTHOR:    John Brestelli
#+DESCRIPTION: EDA Backend
#+OPTIONS:   H:5 num:nil toc:2 p:t
* Vocabulary
- Study :: An investigation and analysis of a subjects
- Entity :: A thing with distinct and independent existence
- Entity Type Graph :: A graph connecting types of entities for a study
- Attribute :: Variable/Property/Characteristics
- Attribute Graph :: A graph showing web display ontology for a study
- Process :: Application of a Protocol
  
* Out of scope
*** Dependencies
**** Preprocessing
**** ISA Reader (CBIL::ISA)
*** Query Performance
*** Data Vis and UX
* Useful Links

[[https://feature.clinepidb.org/ce.feature/app/eda][ClinEpi Feature Site]]

[[https://docs.google.com/document/d/1d9m6en4MagA9h0KIOI0_6Ekq7MVaq_-s5puNFm-oJBI/edit?pli=1#heading=h.olqv0wxx11uz][EDA Workspace Working Group]]

* Schema / Tables                                               :JohnI:JohnB:
[[file:images/eda_uml.png]]
- [X] update schema installer to create EDA and EDA_UD schemas (replace ApiDB)
* Plugins                                                  :JohnB:Wojtek:Jay:
*** InsertEntityGraph
- [-] read the ISA(Tab or Simple) files and populate normalized tables representing the EntityGraph
  - [X] EDA::Study
  - [X] EDA::EntityType :: Household,Partipant, Sample ...
  - [X] EDA::ProcessType :: Name of a process/protocol that connects entities
  - [X] EDA::EntityAttributes :: stable id for the entity + json clob of variables and values
  - [X] EDA::ProcessAttributes :: protocol/edge + json clob of variables and values 
  - [X] EDA::AttributeUnit
  - [ ] EDA::AttributeScale :: log,ln, linear
  - [X] EDA::ProcessTypeComponent :: used to encode a series of protocols
- [X] Add GeoHash attributes if we have Lat/Long
- [ ] argument for schema (eda vs eda_ud)
*** SubclassInsertEntityGraph                         :Wojtek:MicrobiomeDB:
- [X] Append Assay and Data Nodes
- [ ] argument for schema (edv vs eda_ud)
*** LoadAttributesFromEntityGraph
- [X] Read the Values from the EntityGraph Tables and makes a big tall table (key/values).
  - [X] EDA::Attribute :: Calculate stats at this point for each variable/dataset/entityType;  THe Attribute table is for the LEAF nodes in our "AttributeGraph";
  - [X] EDA::AttributeValue :: Tall table with a row for each value for each variable/entity
- [X] Require the owl file at this point as a sanity check
- [X] Handle Units from Annotation Properties
- [ ] Handle Scale from Annotation Properties
- [ ] Check that binary inference has priority over ordinal
- [ ] argument for schema (edv vs eda_ud)
*** LoadEntityTypeAndAttributeGraphs
- [X] Populate tables for parent-child relationships (EntityTypes and Attributes); AttributeGraph also stores annotation properties from the owl file
  - [X] EDA::AttributeGraph :: Connect Attribute (Leaf) to parent/child relationships defined by ontology.  also stores annotation properties from the owl file
  - [X] EDA::EntityTypeGraph :: Infer entity type relationships from the Inputs/Outputs
- [ ] argument for schema (edv vs eda_ud)
*** LoadDatasetSpecificEntityGraph
- [X] Populate Dataset Specific Tables
  - [X] EDA::AttributeValue_${studyId}_${EntityTypeId} :: Subset of the main AttributeValue Table (per dataset)
  - [X] EDA::Ancestors_${studyId}_${EntityTypeId} :: Fields for stable ids for each ancestor
  - [X] EDA::AttributeGraph_${studyId}_${EntityTypeId} :: Join Attribute Table  (LEAF) with AttributeGraph;
  - [X] EDA::EntityAttributes_${studyId}_${EntityTypeId} :: Wide table with Typed Fields
    #+begin_src sql
          select stable_id, data_type, is_multi_valued  from APIDB.ATTRIBUTEGRAPH_GEMSCC0003_1_HOUSEHOLD where has_values = 1;

          select entity_attributes_id
               , json_value(atts, '$.EUPATH_0000127[0]' RETURNING VARCHAR2) string
               , json_value(atts, '$.EUPATH_0000047[0]' RETURNING NUMBER) num
               , json_value(atts, '$.EUPATH_0033147[0]' RETURNING DATE) date
               , json_query(atts, '$.EUPATH_0033147') multi
          from apidb.entityattributes 
          where entity_attributes_id = 10632037;
    #+end_src
- [ ] argument for schema (eda vs eda_ud)
*** LoadMegaStudy                              :MapVEu:MicrobiomeDB:Wojtek:
- [ ] Union of all Studies for Project (Cross Study Comparisons)
- [ ] Units need to convert to base unit
- [ ] How to add Study (display name) as entitytype or variable?
- [ ] argument for schema (edv vs eda_ud)
* Ontologies and Annotation Properties                                  :Jay:
*** Annotation Properties                                   :ClinEpiDB:Jay:
- [ ] Unit Ontology Terms are required to be loaded into SRes.OntologyTerm before study is loaded
- [ ] Which fields from annotation properties are required by EDA?  implcations for Genomics/Mbio/MapVEu
*** OWL File Organization                       :Microbiome:Genomcs:MapVEu:
- [ ] consider dataset specific webdisplay ontologies
- [ ] can we use the owl file in place of the ontologymapping.xml?
* Reflow Workflow                                                       :Jay:
*** Phase1 / ClinEpi
- [ ] finalize ReFlow Workflow
  - [ ] create download files;  use "is_merge_key"
  - [ ] validation of annotation properties (ad hoc or via owl file)
  - [ ] add TBD qa/validation steps
  - [ ] Unit Ontology Terms are required to be loaded into SRes.OntologyTerm before study
  - EDA.StudyCharacteristics
    - [ ] add create table sql file "ApiCommonData/Load/lib/sql/apidbSchema/" and in the installApiDB script (ApiCommonData/Load/bin)
    - [ ] study_id field in new table should point to eda.study
    - [ ] update inc instances to create the EDA.StudyCharacteristic table (JohnI can help with this)
    - [ ] update plugin InsertStudyCharacteristics to use "EDA.StudyCharacteristics"
  - Add "schema" arg for InsertStudyCharacteristics so we can load into EDA schema
    - Needed for EDA_UD vs EDA schema
    - [ ] ensure we are loading into eda and not apidb.
    - [ ] the workflow step which calls the plugin needs to set the "schema" to "EDA"
    - [ ] undoTables needs to lookup the value of "schema" from when the plugin was run forward and undo those tables.      
*** ClinEpi Graphviz
**** Input Tables
#+name: node-table
| *node*                               | *label*                         | *shape* | *fillcolor* |
|--------------------------------------+---------------------------------+---------+-------------|
| start                                | start                           | ellipse |             |
| end                                  | end                             | ellipse |             |
| webdisplay_ontology                  | Webdisplay Ontology             |         | yellow      |
| study_classifications                | Study Classifications           |         | yellow      |
| annotation_properties                | Annotation Properties           |         | yellow      |
| entity_types                         | Entity Types                    |         | yellow      |
| insert_entity_graph                  | Main Entity Graph               |         | purple      |
| load_attributes                      | Attributes and Values           |         | purple      |
| load_graphs                          | EntityType And Attribute Graphs |         | purple      |
| load_dataset_specific                | Dataset Specific Tables         |         | purple      |
| download                             | Download Files                  |         |             |
| validate_download                    | Validate Download               |         |             |
| validate_tables                      | Validate Tables                 |         |             |
| validate_annotation_properties       | Validate Annotation Properties  |         |             |

#+name: graph-table
| from                           | to                             | label |
|--------------------------------+--------------------------------+-------|
| start                          | webdisplay_ontology            |       |
| webdisplay_ontology            | study_classifications          |       |
| webdisplay_ontology            | validate_annotation_properties |       |
| webdisplay_ontology            | entity_types                   |       |
| insert_entity_graph            | load_attributes                |       |
| load_attributes                | load_graphs                    |       |
| load_graphs                    | load_dataset_specific          |       |
| load_dataset_specific          | download                       |       |
| load_dataset_specific          | validate_tables                |       |
| validate_download              | end                            |       |
| download                       | validate_download              |       |
| validate_tables                | end                            |       |
| entity_types                   | insert_entity_graph            |       |
| validate_annotation_properties | annotation_properties          |       |
| annotation_properties          | load_graphs                    |       |

**** graph-from-tables

#+name: graph-from-tables
#+HEADER: :var nodes=node-table graph=graph-table
#+BEGIN_SRC emacs-lisp :colnames yes :exports code
     (concat
          "//rankdir=LR;\n" ;; remove comment characters '//' for horizontal layout; add for vertical layout
          (mapconcat
           (lambda (x)
             (format "%s [label=\"%s\" shape=%s style=\"filled\" fillcolor=\"%s\"]"
                             (car x)
                             (nth 1 x)
                             (if (string= "" (nth 2 x)) "box" (nth 2 x))
                             (if (string= "" (nth 3 x)) "none" (nth 3 x))
                             )) nodes "\n")
          "\n"
          (mapconcat
           (lambda (x)
             (format "%s -> %s [taillabel=\"%s\"]"
                             (car x) (nth 1 x) (nth 2 x))) graph "\n")
          )
#+END_SRC

#+HEADER: :var input=graph-from-tables :file images/reflowMadness.png
#+BEGIN_SRC dot :exports results
digraph {
 $input
}
#+END_SRC



*** Other Components
- [ ] MBio and MapVEU Need a dedicated workflow Template
- [ ] Where are we loading application specific data? (datasets, SNPs, WHO Standards, ...)
- Which studies would be made into Mega Studies
  - Current use cases are all studies for Mbio and all studies for MapVEu

* Loading
** Phase1 Production Loading                                 :ClinEpiDB:Jay:
- [ ] work with outreach to preprocess studies targeted for beta release
- [ ] reload data as requested into rm41910 until passes manual qa
- [ ] Load into "EDA" schema instead of ApiDB
- [ ] use finalized workflow to load datasets into clean/rbld instance as they pass manual qa

** MapVEu                                                       :BobM:JohnB:
- [ ] Load studies from ISA dumps
- [ ] Mixed units within studies?
- [ ] Genotype / Phenotype Assays
** MicrobiomeDB                                                     :Wojtek:
- [ ] performance issues with EC levels for functional shotgun data
- [ ] metabolite data
- [ ] Dan identified a small number of studies to load into rm41910
** Genomics
- [ ] DNASeq (SNPs and CNV)
- [ ] Host Pathogen
- [ ] Antibody Microarray (ICEMR)
- [ ] PopSet Isolate Sequences
- [ ] Single cell RNASeq ??
- [ ] Systems Biology  
** DIY                                   :ClinEpiDB:MicrobiomeDB:Jay:Wojtek:
- [ ] Refactor of ClinEpi preprocessing scripts and make Container
- [ ] how to do inserts? can we reuse the existing plugins?
- [ ] input for mbio is a biom file (table of otu and table of sample details)
- [ ] how to handle ontology dependencies?









* Data Validation                                 :JohnB:Steph:Jay:ClinEpiDB:
*** Reader Interface
#+BEGIN_EXAMPLE
 $entityType = $dataset->getEntityType($sourceId);
 @variables = $entityType->getVariables();
 $entityType->getEntityCount();
 $entityType->getStableIds();
 $entityType = $entity->getEntityType();
 $entity->getStableId();
 $entity->getValue(VariableSourceId, [string,number,date]);
 $attribute->getDisplayName(); # lots of other variable info
 $attribute->hasValues(); # lots of other variable info
 $attribute->isContinuous(); # lots of other variable info
 #+END_EXAMPLE
*** Readers
- [ ] Raw Data (dataset specific);  Maybe not required?
- [ ] Download File
- [ ] Dataset Specific Database Queries
- [ ] Webservices
*** Tests
- [ ] Tests can only use methods defined by the API
- [ ] The same tests will be run first on the FromProvider Files (to establish Truth) then run on the database ...
  + example:  "ok($participantEntityType->getEntityCount() == 5000)";
    + This example get the counts of participants and ensures that the number it gets is 5000;
