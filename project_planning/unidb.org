#+STARTUP: indent
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+TITLE:     UniDB
#+AUTHOR:    John Brestelli
#+DESCRIPTION: UniDB
#+OPTIONS:   H:5 num:nil toc:2 p:t tags:not-in-toc
* B53 :JohnB:
** DONE Site Configuration
- [X] (Cristina) confiugre beta and qa sites to use "uni-build-53" and uni053n
** DONE Workflow Changes
- [X] Remove step copy to webservices and download files
** DONE Schema Changes
- [X] study.study study_id and investigation_id need to be number(8)
- [X] Add "database_orig" and "primary_key_orig" fields to every table in "Core.TableInfo"
- [X] Add Index on each table for 3 fields (pk, pk_orig, db_orig)
- [X] new script to add fields after apidbschema has been made.  last script when creating apidb schema
  #+begin_src sql
   BEGIN
   FOR item in (select di.name || '.' || di.name as table_name
                     , ti.primary_key_column
                     , di.name || '_' || di.name || '_map' as index_name
                     from (-- everything but version and userdataset schemas
                     select  t.*
                     from core.tableinfo t, core.databaseinfo d
                     where lower(t.table_type) != 'version'
                     and t.DATABASE_ID = d.DATABASE_ID
                     and d.name not in ('UserDatasets', 'ApidbUserDatasets', 'chEBI', 'hmdb')
                     and t.name not in ('AlgorithmParam','GlobalNaturalKey','DatabaseTableMapping','SnpLinkage', 'CompoundPeaksChebi')
                     minus
                     -- minus Views on tables
                     select * from core.tableinfo where view_on_table_id is not null
                     ) ti, core.databaseinfo di
                     where ti.database_id = di.database_id   )
   LOOP
    ALTER table item.table_name add database_orig varchar2(30), primary_key_orig number(20);
    CREATE INDEX index_name ON item.table_name (database_orig, primary_key_orig, item.primary_key_column) tablespace indx; 
   END LOOP;
   END;
  #+end_src
** DONE ApiCommonDatasts
- [X] configure only dbs which have been exported for b53
- [X] bld ApiCommonDatasts and generateFromDatasets
** DONE Plugin Changes for Sequence Variations
- [X] Skip ApiDB.SequenceVariation
  - ~ 58 hours to load 633 mil rows from Plasmo (fungi has > 1.3 billion rows)
    #+BEGIN_EXAMPLE
    Sun Apr  4 18:22:17 2021	Begin ID Lookup for ApiDB::SequenceVariation from database plas051n
    Sun Apr  4 18:24:35 2021	Finished ID Lookup for ApiDB::SequenceVariation from database plas051n
    Sun Apr  4 18:29:19 2021	Processed 100000 from ApiDB::SequenceVariation
    Sun Apr  4 18:29:55 2021	Processed 200000 from ApiDB::SequenceVariation
    ....
    Wed Apr  7 05:30:14 2021	Processed 633000000 from ApiDB::SequenceVariation
    Wed Apr  7 05:30:44 2021	Processed 633100000 from ApiDB::SequenceVariation
    Wed Apr  7 05:30:48 2021	Finished Reading data from ApiDB::SequenceVariation
    Wed Apr  7 05:30:48 2021	Finished Loading 633110728 Rows into table ApiDB::SequenceVariation from database plas051n
    #+END_EXAMPLE
** DONE Tuning Manager                                               :JohnB:
- [X] SNPAttributes (ok for b53 but will be missing some fields)
- [X] SNPStrains (update sql so it doesn't use SequenceVariation)
  #+begin_src sql
	select * from study.protocolappnode where name like '% (Sequence Variation)'
  #+end_src
** DONE Model                                                        :MarkH:
- [X] Using include/exclude projects make the snpattributes which are missing internal for b53
** DONE FeatureLocation Patch 
- [X] Truncate apidb.featurelocation
  #+begin_src sql
  truncate table apidb.featurelocation;
  #+end_src 
- [X] remove orf code from GUSTableLoader
- [X] make new Temporary apidb.databasetablemapping (decode inc->053n) and make indexe and delete rows from apidb.databasetablemapping for featurelocation
  #+begin_src sql
    create table apidb.databasetablemappingPatch as 
    select database_table_mapping_id
         , decode(database_orig, 'cryp-inc', 'cryp053n',
                                 'giar-inc', 'giar053n',
                                 'ameb-inc', 'ameb053n',
                                 'piro-inc', 'piro053n',
                                 'toxo-inc', 'toxo053n',
                                 'vect-inc', 'vect053n',
                                 'host-inc', 'host053n',
                                 'tryp-inc', 'tryp053n',
                                 'tvag-inc', 'tvag053n',
                                 'fung-inc', 'fung053n',
                                 'plas-inc', 'plas053n',
                                 'micr-inc', 'micr053n', 'ERROR') as database_orig
         , table_name
         , primary_key_orig
         , primary_key
         , modification_date
         , user_read
         , user_write
         , group_read
         , group_write
         , other_read
         , other_write
         , row_user_id
         , row_group_id
         , row_project_id
         , row_alg_invocation_id
    from apidb.databasetablemapping
    where table_name !=  'ApiDB::FeatureLocation';
  #+end_src
- [X] rename table (log in as apidb user)
  #+begin_src sql
    rename databasetablemapping to databasetablemapping_old
    rename databasetablemappingpatch to databasetablemapping
  #+end_src	
- [X] add indexes
  #+begin_src sql
    GRANT INSERT, SELECT, UPDATE, DELETE ON ApiDB.DatabaseTableMapping TO gus_w;
    GRANT SELECT ON ApiDB.DatabaseTableMapping TO gus_r;
    ALTER TABLE ApiDB.DatabaseTableMapping ADD CONSTRAINT database_map_tab2_pk PRIMARY KEY (database_table_mapping_id);
    CREATE INDEX apidb.db_tbl_map_tab2_idx ON ApiDB.DatabaseTableMapping (database_orig, table_name, primary_key_orig, primary_key) tablespace indx;
#+end_src
- [X] Run plugin manually for FeatureLocation (can we use direct path mode?)
  #+begin_src bash
    ga ApiCommonData::Load::Plugin::InsertUniDB --database piro053n --table_reader 'ApiCommonData::Load::GUSTableReader' --logDir /home/jbrestel/tmp/featureLocationPatch/piro --mode load --commit ;
    ga ApiCommonData::Load::Plugin::InsertUniDB --database ameb053n --table_reader 'ApiCommonData::Load::GUSTableReader' --logDir /home/jbrestel/tmp/featureLocationPatch/ameb --mode load --commit;
    ga ApiCommonData::Load::Plugin::InsertUniDB --database cryp053n --table_reader 'ApiCommonData::Load::GUSTableReader' --logDir /home/jbrestel/tmp/featureLocationPatch/cryp --mode load --commit;
    ga ApiCommonData::Load::Plugin::InsertUniDB --database giar053n --table_reader 'ApiCommonData::Load::GUSTableReader' --logDir /home/jbrestel/tmp/featureLocationPatch/giar --mode load --commit ;
    ga ApiCommonData::Load::Plugin::InsertUniDB --database host053n --table_reader 'ApiCommonData::Load::GUSTableReader' --logDir /home/jbrestel/tmp/featureLocationPatch/host --mode load --commit;
    ga ApiCommonData::Load::Plugin::InsertUniDB --database micr053n --table_reader 'ApiCommonData::Load::GUSTableReader' --logDir /home/jbrestel/tmp/featureLocationPatch/micr --mode load --commit ;
    ga ApiCommonData::Load::Plugin::InsertUniDB --database plas053n --table_reader 'ApiCommonData::Load::GUSTableReader' --logDir /home/jbrestel/tmp/featureLocationPatch/plas --mode load --commit ;
    ga ApiCommonData::Load::Plugin::InsertUniDB --database toxo053n --table_reader 'ApiCommonData::Load::GUSTableReader' --logDir /home/jbrestel/tmp/featureLocationPatch/toxo --mode load --commit;
    ga ApiCommonData::Load::Plugin::InsertUniDB --database tvag053n --table_reader 'ApiCommonData::Load::GUSTableReader' --logDir /home/jbrestel/tmp/featureLocationPatch/tvag --mode load --commit;
    ga ApiCommonData::Load::Plugin::InsertUniDB --database tryp053n --table_reader 'ApiCommonData::Load::GUSTableReader' --logDir /home/jbrestel/tmp/featureLocationPatch/tryp --mode load --commit;
    ga ApiCommonData::Load::Plugin::InsertUniDB --database fung053n --table_reader 'ApiCommonData::Load::GUSTableReader' --logDir /home/jbrestel/tmp/featureLocationPatch/fung --mode load --commit;
    ga ApiCommonData::Load::Plugin::InsertUniDB --database vect053n --table_reader 'ApiCommonData::Load::GUSTableReader' --logDir /home/jbrestel/tmp/featureLocationPatch/vect --mode load --commit;
    #+end_src
- [X] decode 053n -> inc
** DONE MassSpecFeature Patch
- [X] update string6 to source_id to retain orig source_id 
  #+begin_src sql
   update dots.aafeatureimp 
   set string6 = source_id
   where subclass_view = 'MassSpecFeature';;
  #+end_src
- [X] use mapping table to update source_id:  yew:~/patches/patchMassSpecFeature.pl
- [X] Patch uni-inc  
** Punt 
1. SequenceVariations were not loaded;
   - tables on snp record page
   - one or two snp attributes 
2. Intron Junctions
   - jbrowse track (turn off)
3. User Datasets (installed into one app db only)
4. Llinas Mass Spec Profiles
* B54 :JohnB:Wei:
** DONE Genomics Workflow Changes
- [X] Add other 2 SNP Attributes which are being added by tuning manager
- [X] Required rebuild for all snp datasets 
** TODO Schema Changes
- [ ] use perl script to automatically add "database_orig" and "primary_key_orig" in installer
- [X] add 3 new fields to SRes.OntologySynonym
** DONE Bulk Loader for SNP / Seqvars
** DONE Add Mass Spec profile (Llinas) [[redmine:45318][redmine:45318]]
** TODO Update SRes.Taxon and SRes.TaxonName with most recent  version of NCBI Taxonomy
- [ ] Update NCBI Taxonomy
- [ ] Test Taxonomy Update 
- [ ] Run Tuning manager
** DONE Undo unidbcomponents
** Patch Intron Junctions
- [ ] Intron Junctions missing fk constraint
  - [ ] Patch update nasequenceid mapping (Patch other tables with misisng fk constraints)
    - [ ] uni-inc, uni053n, uni054(s/n)
* Beta Release                                       :Mark:JohnI:JohnB:Bindu:
** Automated QA Process
1. [X] compare list of wdk Searches, Attributes, and Tables in UniDB to union of all component projects
   - [X] Record expected and Actual Results
2. [X] Selenium Tests for Search Pages (Bindu)
3. [X] use the webserive queries for Performance Tests
   - [X] compare plasmodb.org (b52) to feature.veupathdb.org
   - [X] address faiures
   - [X] Record expected and Actual Results
4. [X] attribute tables
   - [X] using sql minus operation, compare 052 attribute tables in eupa052n to uni-inc
   - [X] address faiures (JohnI)
   - [X] Record expected and Actual Results
5. [X] Record page tables;  can test against individual components
   - [X] foreach record table, run the sql and compare counts (union for all components)
   - [X] address faiures
   - [X] Record expected and Actual Results
6. [X] Run all Param queries on uni052n vs union of components
   - [X] Deal with enum params
   - [X] is there a webservice way to get the values for all params
* Future Releases :JohnI:JohnB:MarkH:Bindu:
** Plugin Changes for DatabaseMapping fields
- [ ] Database Mapping Table
  - [ ] Global Rows still need to populate existing Database Mapping Table
  - [ ] Component Specific Rows should populate the 2 new fields in the primary table
  - [ ] Undo needs to work BOTH ways because of legacy data in genomics sites
  - [ ] Existing queries using databasemapping table need to be union of both ways because of legacy data in genomics sites
- [ ] Address cleanup steps for failures
  - [ ] Database Specific / Non Global we get for free as there is no clean up needed after above change
  - [ ] For Global Rows, we must delete the apidb.databasetablemapping rows for this table + alg_invocation
    #+begin_src sql
	  delete apidb.databasetablemapping where database_orig = ? and table_name = ? and row_alg_invocation_id = ?
    #+end_src
  - [ ] update how we find unidb aware tables
    #+begin_src sql
      select ti.name as table_name
           , di.name as database_name
           , ti.primary_key_column
      from core.tableinfo ti, core.databaseinfo di,
           (select owner, table_name
           from all_tab_columns 
           where column_name in ('DATABASE_ORIG', 'PRIMARY_KEY_ORIG')
           and owner != 'EDA' -- TEMPORARY
           group by owner, table_name
           having count(*) = 2) wit
      where ti.database_id = di.database_id
      and upper(wit.owner) = upper(di.name)
      and upper(wit.table_name) = upper(ti.name)
      and ti.VIEW_ON_TABLE_ID is null
    #+end_src
** Tuning Manager
*** Why so many dependencies on DatasetPresenter?
*** Intron Junctions [[redmine:45717][redmine:45717]]
*** Move Organism Specific to workflow
*** Comparative Genomics ???
** Model (JBrowse, WDK, WS Plugins, ...)
- [ ] Profile Similarity (Inject this instead of hard coding)
- [ ] Phenotype (Injection)
- [ ] Cellular Location (TriTyp, Giardia?) (Injection)
- [ ] MassSpec
  - [ ] Change tuning manager and model to use mass_spec_summary_id in place of source_id (grep dots.massspecfeature)
  - [ ] Confirm with data loaders (update ApiCommonData)    
- [ ] remove project_id from webservice queries (once we remove federated portal)
- [ ] Text Searches (will site search fix these?)
** wgcna (host /pathogen)

** TODO Patch Intron Junctions and other tables which had missing fk dependencey :JohnB:
* SOP for schema changes
- [ ] How to handle schema changes?
  - [ ] add columns
  - [ ] add tables
  - [ ] alter size of columns
* Use Cases For Unified Database
- fully functional portal (veupathdb.org)
- host / pathogen / vector
- user defined organism preferences
- Fewer prod db instances
- ebi2gus
* Basics
- [[https://docs.google.com/document/d/1K3ckE6hwN9r-Dp1Av_zDH5Jcr7ApbBjQ-7yJM1zk0bQ/edit][UniDB Design Document December 2019]]
- [[https://wiki.apidb.org/index.php/UniDB%20Workflow][Wiki / Technical info about running workflow]]
* Table Reader(s)
- [[~/project_home/ApiCommonData/Load/lib/perl/UniDBTableReader.pm][UniDB Table Reader]]
  - initial thinking was that sql queries would map input->output
- [[~/project_home/ApiCommonData/Load/lib/perl/GUSTableReader.pm][GUSTableReader]]
  - inpput is a GUS oracle instance
  - queries here are like "select * from $table"
- [[~/project_home/ApiCommonData/Load/lib/perl/EBITableReader.pm][EBI Table Reader]]
  - input is flat files
  - no queries.  the translation from chado/mysql->GUS is done via [[https://github.com/VEuPathDB/ebi2gus/][ebi2gus]] and uses the E! perl API
    - [[~/project_home/ebi2gus/Dockerfile]]
    - [[~/project_home/ebi2gus/lib/perl/EBIParser.pm]]
    - [[~/project_home/ebi2gus/lib/perl/GUS/DoTS/GeneFeature.pm]]

* ebi2GUS
- given mysql dump (init.sql), the container will fire up mariadb server, run the init.sql, will run dumpGUS.pl which creates a set of files (one file per GUS Table)
- new branch needed
  - change to GUS schema ( ~ 40 tables for "core genome")
  - changes to input schema
  - changes to the perl api



