#+STARTUP: indent
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+TITLE:     Gene Lists
#+AUTHOR:    John Brestelli
#+DESCRIPTION: Gene Lists
#+OPTIONS:   H:5 num:nil toc:3 p:t tags:not-in-toc

* Gene List Workflow Dataset
** FungiDB Clusters Example from Eve( Omeara_2020_CalCEN_UMAP)                                                   :AnnB:
[[redmine:46157]]

*** Data Loading

1. Make "final" directory input files
  yew:/eupath/data/EuPathDB/manualDelivery/FungiDB/calbSC5314/genericProfile/Omeara_2020_CalCEN_UMAP/2020-12-06/final
   - 1 file per cluster.  each file will have one column for the gene ids
2. Make analysisConfig.xml file
   - there are 2 types of names we'll need to define.  "profileSetName" = displayName for the experiment.  "listName" which will be for the cluster
     
    #+begin_src xml
      <xml>
        <step class="ApiCommonData::Load::GeneList">
          <property name="listName" value="Cellular localisation, protein modification" />
          <property name="profileSetName" value="Omeara 2020 ..." />
          <property name="inputFile" value="cluster1.txt" />
        </step>
        ...
      </xml>
    #+end_src

3. Make the Step Class

   #+begin_src perl
     package ApiCommonData::Load::GeneList;
     use base qw(ApiCommonData::Load::Loadable); 
     sub new { 
         my ($class, $args) = @_;
         my $self = $class->SUPER::new($args);
         $self->setSourceIdType("gene");
         $self->setProtocolName("gene_list");
         $self->setNames([$self->{listName}]);
         $self->setFileNames([$self->getInputFile()]);
         return $self;
     }
     1;
   #+end_src

4. test by calling "doTranscriptExpression" and Confirm that the config file is correct
   usage:  perl doTranscriptExpression.pl --xml_file <XML> --main_directory <DIR> [--input_file <FILE>] [--seq_id_prefix <SEQ ID PREFIX>] [--patch <use this flag for a patch update>] --technology_type "functional_data"
   - the output should be a file called "insert_study_config"

5. Tell ApiCommonData::Load::Plugin::InsertStudyResults plugin where to load this data
   - Possible having only 1 column would be issue?
   - add elsif to the "addResults" subroutine
   #+begin_src perl
     elsif ($protocolName =~ /gene_list/) {
         $tableString = "ApiDB::NAFeatureList";
     }          
      #+end_src

6. create the database table ApiCommonData/Load/lib/sql/api

   #+begin_src sql
CREATE TABLE ApiDB.NAFeatureList (
  na_feature_list_id   NUMBER(10) NOT NULL,
  na_feature_id         NUMBER(10) NOT NULL,
  protocol_app_node_id         NUMBER(10) NOT NULL,
  MODIFICATION_DATE     DATE,
  USER_READ             NUMBER(1),
  USER_WRITE            NUMBER(1),
  GROUP_READ            NUMBER(1),
  GROUP_WRITE           NUMBER(1),
  OTHER_READ            NUMBER(1),
  OTHER_WRITE           NUMBER(1),
  ROW_USER_ID           NUMBER(12),
  ROW_GROUP_ID          NUMBER(3),
  ROW_PROJECT_ID        NUMBER(4),
  ROW_ALG_INVOCATION_ID NUMBER(12),
  FOREIGN KEY (na_feature_id) REFERENCES DoTS.NaFeatureImp (na_feature_id),
  FOREIGN KEY (protocol_app_node_id) REFERENCES Study.ProtocolAppNode (protocol_app_node_id),
  PRIMARY KEY (na_feature_list_id)
);

create index apidb.nfl_ix
  on apidb.NaFeatureList (protocol_app_node_id, na_feature_id) tablespace indx;

CREATE SEQUENCE ApiDB.NAFeatureList_sq;

GRANT insert, select, update, delete ON ApiDB.NAFeatureList TO gus_w;
GRANT select ON ApiDB.NAFeatureList TO gus_r;
GRANT select ON ApiDB.NAFeatureList_sq TO gus_w;

INSERT INTO core.TableInfo
  (table_id, name, table_type, primary_key_column, database_id, 
    is_versioned, is_view, view_on_table_id, superclass_table_id, is_updatable, 
    modification_date, user_read, user_write, group_read, group_write, 
    other_read, other_write, row_user_id, row_group_id, row_project_id,
    row_alg_invocation_id)
  SELECT core.tableinfo_sq.nextval, 'NAFeatureList', 'Standard', 'na_feature_list_id',
    d.database_id, 0, 0, '', '', 1,sysdate, 1, 1, 1, 1, 1, 1, 1, 1, p.project_id, 0
  FROM dual,
       (SELECT MAX(project_id) AS project_id FROM core.ProjectInfo) p,
       (SELECT database_id FROM core.DatabaseInfo WHERE name = 'ApiDB') d
  WHERE 'NAFeatureList' NOT IN (SELECT name FROM core.TableInfo
  WHERE database_id = d.database_id); 
    


exit;

#+end_src

   #+begin_src sql
drop table ApiDB.NAFeatureList;
drop sequence ApiDB.NAFeatureList_sq;

DELETE FROM core.TableInfo
WHERE lower(name) = lower('NAFeatureList')
  AND database_id = (SELECT database_id
                     FROM core.DatabaseInfo 
                     WHERE lower(name) = 'apidb');

exit;

#+end_src

7. have JohnI run above sql to add table to all "inc" instances

8. Let Haiming know this is ready to load;
   - he should load as "generic profile" with category/technology = "function prediction"

9. WDK Search
   - [ ] probably need to add organism param because of organism preferences
   - [ ] param query to get the protocolappnode names and ids
   - [ ] param query to get the dataset name
   - [ ] search form with 2 params (dataset name and list name)
   - [ ] categorize the search
   - [ ] add model ref so that the search is linked to the dataset

10. Let Outreach/DataLoading fill in the dataset presetner xml      

*** Front End

we can use something like this as an example: https://fungidb.org/fungidb/app/search/transcript/GenesByTelomereProximity

1. Need some mechanism for finding gene Lists which are datasets

    #+begin_src sql
--option 1
select d.name as term, r.external_database_release_id as internal
from sres.externaldatabase d
   , sres.externaldatabaserelease r
where lower(d.name) like '%functional_data%'
and d.external_database_id = r.external_database_id ;
--option 2
select distinct d.name as term, r.external_database_release_id  as internal
       from sres.externaldatabase d
   , sres.externaldatabaserelease r
   , apidb.nafeaturelist fl
   , study.studylink sl
   , study.study s
where sl.protocol_app_node_id = fl.protocol_app_node_id
and sl.study_id=  s.study_id
and r.external_database_release_id = s.external_database_release_id
and d.external_database_id = r.external_database_id ;
#+end_src

2. Use the query above to create a hidden dataset param

  ApiCommonModel/Model/lib/wdk/model/questions/params/geneParams.xml

   the queryset GeneVQ is in the same file.  it will return a "term" and an "internal".  this should be hidden

  #+begin_src xml
   <flatVocabParam name="some_unique_name_tbd"
                    queryRef="GeneVQ.someUniqueQueryName"
                    prompt="Gene List Dataset"
                    visible="false"
                    quote="false"
                    multiPick="false" >
      <help>TODO</help>
    </flatVocabParam>
    #+end_src

3. Need an additional parameter which is dependent on this one

    #+begin_src xml
    <filterParam name="gene_list_param"
                    queryRef="GeneVQ.someOtherUniqueName"
                    prompt="Gene List"
                    visible="true"
                    quote="false"
                    multiPick="false"
                    dependedParamRef="geneParams.some_unique_name_tbd">

      <visibleHelp>OPTINAL</visibleHelp>
      <help>
   TODO
      </help>
    </filterParam>
    #+end_src
    This query will use the values from the first query
    #+begin_src xml
  <sqlQuery name="XXXX" isCacheable="false">
      <column name="term"/>
      <column name="internal"/>

      <sqlParamValue name="some_unique_name_tbd" >
      <sql>
<![CDATA[
        select distinct pan.name as term, pan.protocol_app_node_id as internal
        from study.protocolappnode pan, study.study s, study.studylink sl
         where s.external_database_release_id = $$some_unique_name_tbd$$
         and s.study_id = sl.study_id
         and sl.protocol_app_node_id = pan.protocol_app_node_id
     ]]>

      </sql>
      <sqlQuery>
    #+end_src

4. Make sure to include processQueries for each sqlQuery. These are used by the veupathdb portal

5. New Injected Search

   a. define the template

      #+begin_src example
[templateStart]
name=geneListFunctional
anchorFile=ApiCommonModel/Model/lib/wdk/model/questions/geneQuestions.xml
prop=datasetName
prop=datasetDisplayName
prop=datasetShortDisplayName
prop=projectName
prop=buildNumberIntroduced
prop=includeProjects
prop=organismAbbrevDisplay
>templateTextStart<
    <question name="GenesByFunctionalBlahGeneList${datasetName}" includeProjects="${includeProjects}" newBuild="${buildNumberIntroduced}"
         displayName="${organismAbbrevDisplay} ${datasetDisplayName} GeneList (functional blah)"
         shortDisplayName="${datasetShortDisplayName} (???)"
         queryRef="GeneId.TODO"
         recordClassRef="TranscriptRecordClasses.TranscriptRecordClass">

        <!-- param we are overriding -->
        <paramRef ref="geneParams.todo_dataset_param_name"  default="${datasetName}" visible="false"/>

	<summary>
	   <![CDATA[
          TODO
          ]]>
	</summary>

        <description>
           <![CDATA[
  TODO
          ]]>
	</description>
    </question>
>templateTextEnd<

      #+end_src

   b. write the injector

      Make a new java class :
      ApiCommonModel/Model/src/main/java/org/apidb/apicommon/model/datasetInjector/GeneList.pm


      #+begin_src java
    @Override
    public void injectTemplates() {
      setShortAttribution();


      String projectName = getPropValue("projectName");
      //String presenterId = getPropValue("presenterId");
      String datasetName = getDatasetName();

      setOrganismAbbrevFromDatasetName();

     if(getPropValueAsBoolean("isEuPathDBSite")) {
          setPropValue("includeProjects", projectName + ",EuPathDB,UniDB");
      } else {
          setPropValue("includeProjects", projectName + ",UniDB");
      }

     String searchCategory = "searchCategory-functional-gene-list";
     String questionName = "TODO";

     setPropValue("searchCategory", searchCategory);
     setPropValue("questionName", questionName);

     injectTemplate("YOUR_NEW_QUESTION_TEMPLATE");
     injectTemplate("internalGeneSearchCategory");
    }


@Override
  public void addModelReferences() {
              addWdkReference("TranscriptRecordClasses.TranscriptRecordClass", "question",
                              "GeneQuestions.GenesByTODO" + getDatasetName());
}


  @Override
  public String[][] getPropertiesDeclaration() {
      String [][] declaration = {
                                 {"isEuPathDBSite", ""}
                                 }
          }





     #+end_src



   c. add the template anchor in geneQuestions.xml

     #+begin_example
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- ChIP chip -->
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <!-- TEMPLATE_ANCHOR chipchipQuestion -->
       #+end_example

6. Dataset Record / Dataset Presenter

   Add templateInjector xml element to FungiDB.xml (Presenter).



* WGCNA
* User Contributed (UserDataset)
* VEupath Gene Sets (UserDataset made by superuser and shared publically)
    
* Pathways and GO Functions
* Automated Gene Lists
  - Dataset1
    - Comparison A vs B
    - Comparison A vs C
    - Comparison B vs C
  - Dataset2
    - ...
